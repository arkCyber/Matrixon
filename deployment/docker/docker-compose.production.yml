# =============================================================================
# Matrixon Matrix NextServer - Production Docker Compose
# =============================================================================
#
# Project: Matrixon - Ultra High Performance Matrix NextServer (Synapse Alternative)
# Author: arkSong (arksong2018@gmail.com) - Founder of Matrixon Innovation Project
# Date: 2024-12-17
# Version: 2.0.0-production
# License: Apache 2.0 / MIT
#
# Description:
#   Production-grade Docker Compose configuration for Matrixon Matrix server
#   with comprehensive monitoring, logging, and high availability setup.
#
# Usage:
#   docker-compose -f docker-compose.production.yml up -d
#   docker-compose -f docker-compose.production.yml logs -f matrixon
#   docker-compose -f docker-compose.production.yml down
#
# =============================================================================

version: '3.8'

services:
  # Matrixon Matrix Server - Main Application
  matrixon:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        RUST_VERSION: "1.85.0"
        TARGET_ARCH: "x86_64-unknown-linux-musl"
        OPTIMIZATION_LEVEL: "3"
    image: matrixon:production
    container_name: matrixon_server
    restart: unless-stopped
    
    # Port mapping
    ports:
      - "6167:6167"      # Matrix API port
      - "9090:9090"      # Metrics port (internal)
    
    # Volume mounts for persistence
    volumes:
      - matrixon_data:/app/data
      - matrixon_logs:/app/logs
      - matrixon_backups:/app/data/backups
      - ./docker/production-config.toml:/app/config/production-config.toml:ro
    
    # Environment variables
    environment:
      - RUST_LOG=info,matrixon=debug
      - RUST_BACKTRACE=1
      - MATRIXON_ENV=production
      - MATRIXON_CONTAINER=true
      - TZ=UTC
    
    # Resource limits for production
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 8G
        reservations:
          cpus: '2.0'
          memory: 4G
    
    # Health check
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:6167/_matrix/client/versions"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"
        compress: "true"
    
    # Security settings
    security_opt:
      - no-new-privileges:true
    read_only: false
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    
    # Network configuration
    networks:
      - matrixon_network
    
    # Dependencies
    depends_on:
      - prometheus
      - grafana

  # Nginx Reverse Proxy for SSL termination and load balancing
  nginx:
    image: nginx:1.25-alpine
    container_name: matrixon_nginx
    restart: unless-stopped
    
    ports:
      - "80:80"
      - "443:443"
      - "8448:8448"     # Matrix federation port
    
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    
    # Health check
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 5s
      retries: 3
    
    networks:
      - matrixon_network
    
    depends_on:
      - matrixon

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: matrixon_prometheus
    restart: unless-stopped
    
    ports:
      - "9091:9090"     # Prometheus web UI (external access)
    
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    
    networks:
      - matrixon_network

  # Grafana for monitoring dashboards
  grafana:
    image: grafana/grafana:10.2.0
    container_name: matrixon_grafana
    restart: unless-stopped
    
    ports:
      - "3000:3000"     # Grafana web UI
    
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=matrixon_admin_2024
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    
    networks:
      - matrixon_network
    
    depends_on:
      - prometheus

  # Redis for caching and session storage
  redis:
    image: redis:7.2-alpine
    container_name: matrixon_redis
    restart: unless-stopped
    
    ports:
      - "6379:6379"
    
    volumes:
      - redis_data:/data
      - ./docker/redis.conf:/usr/local/etc/redis/redis.conf:ro
    
    command: redis-server /usr/local/etc/redis/redis.conf
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
    
    # Health check
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
    
    networks:
      - matrixon_network

  # Log aggregation with Fluentd
  fluentd:
    image: fluent/fluentd:v1.16-1
    container_name: matrixon_fluentd
    restart: unless-stopped
    
    volumes:
      - ./docker/fluentd.conf:/fluentd/etc/fluent.conf:ro
      - matrixon_logs:/app/logs:ro
      - nginx_logs:/var/log/nginx:ro
      - fluentd_logs:/fluentd/log
    
    ports:
      - "24224:24224"
      - "24224:24224/udp"
    
    networks:
      - matrixon_network

# Named volumes for data persistence
volumes:
  matrixon_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data
  
  matrixon_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./logs
  
  matrixon_backups:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./backups
  
  nginx_logs:
    driver: local
  
  prometheus_data:
    driver: local
  
  grafana_data:
    driver: local
  
  redis_data:
    driver: local
  
  fluentd_logs:
    driver: local

# Networks
networks:
  matrixon_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 
