# =============================================================================
# Matrixon Production Docker Compose
# =============================================================================
#
# Project: Matrixon - Ultra High Performance Matrix NextServer
# Author: arkSong (arksong2018@gmail.com) - Founder of Matrixon Innovation Project
# Date: 2024-12-11
# Version: 0.11.0-alpha
# License: Apache 2.0 / MIT
#
# Description:
#   Production-ready Docker Compose configuration for Matrixon Matrix server
#   with PostgreSQL, Redis, and monitoring stack
#
# =============================================================================

version: '3.8'

services:
  # Matrixon Matrix Server
  matrixon:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: matrixon-server
    restart: unless-stopped
    expose:
      - "8008"         # Client API (internal only)
      - "8448"         # Federation API (internal only)
      - "9090"         # Metrics (internal only)
    volumes:
      - matrixon_data:/var/lib/matrixon/data
      - matrixon_logs:/var/log/matrixon
      - ./docker/matrixon.toml:/etc/matrixon/matrixon.toml:ro
    environment:
      - MATRIXON_CONFIG_PATH=/etc/matrixon/matrixon.toml
      - MATRIXON_LOG_LEVEL=info
      - RUST_LOG=matrixon=info,sqlx=warn
      - RUST_BACKTRACE=1
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - matrixon-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8008/_matrix/client/versions"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 8G
        reservations:
          cpus: '2.0'
          memory: 4G

  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: matrixon-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: matrixon
      POSTGRES_USER: matrixon
      POSTGRES_PASSWORD: secure_password_change_me
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    command: >
      postgres
        -c shared_preload_libraries=pg_stat_statements
        -c max_connections=200
        -c shared_buffers=512MB
        -c effective_cache_size=1GB
        -c maintenance_work_mem=128MB
        -c checkpoint_completion_target=0.9
        -c wal_buffers=16MB
        -c default_statistics_target=100
        -c random_page_cost=1.1
        -c effective_io_concurrency=200
        -c work_mem=8MB
        -c min_wal_size=1GB
        -c max_wal_size=4GB
        -c max_worker_processes=8
        -c max_parallel_workers_per_gather=4
        -c max_parallel_workers=8
        -c max_parallel_maintenance_workers=4
    networks:
      - matrixon-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U matrixon -d matrixon"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: matrixon-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: >
      redis-server
        --appendonly yes
        --appendfsync everysec
        --maxmemory 512mb
        --maxmemory-policy allkeys-lru
        --tcp-keepalive 60
        --timeout 300
        --save 900 1
        --save 300 10
        --save 60 10000
    networks:
      - matrixon-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: matrixon-prometheus
    restart: unless-stopped
    ports:
      - "9080:9090"
    volumes:
      - prometheus_data:/prometheus
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - matrixon-network
    depends_on:
      - matrixon

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: matrixon-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana.ini:/etc/grafana/grafana.ini:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin_change_me
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - matrixon-network
    depends_on:
      - prometheus

  # Nginx Reverse Proxy
  nginx:
    image: nginx:1.25-alpine
    container_name: matrixon-nginx
    restart: unless-stopped
    ports:
      - "80:80"           # Client API
      - "8448:8448"       # Federation API  
      - "9090:9090"       # Metrics/Admin
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf:ro
      - nginx_logs:/var/log/nginx
    networks:
      - matrixon-network
    depends_on:
      - matrixon
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

volumes:
  matrixon_data:
    driver: local
  matrixon_logs:
    driver: local
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  matrixon-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 
