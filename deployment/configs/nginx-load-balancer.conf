# Nginx Load Balancer Configuration for matrixon Matrix Server
# Optimized for 200,000+ concurrent connections
# 
# Hardware requirements: 32+ cores, 128+ GB RAM
# Network: 25+ Gbps

# Worker processes and connections
worker_processes auto;  # Match CPU cores
worker_rlimit_nofile 2097152;  # Match system file limits

events {
    worker_connections 65536;  # Max connections per worker
    use kqueue;  # macOS optimization (use epoll on Linux)
    multi_accept on;
    accept_mutex off;
}

# Main HTTP configuration
http {
    # Basic settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    
    # Connection optimization
    keepalive_timeout 60s;
    keepalive_requests 1000;
    
    # Buffer optimization for high throughput
    client_body_buffer_size 256k;
    client_max_body_size 200m;
    client_header_buffer_size 4k;
    large_client_header_buffers 8 16k;
    
    # Proxy buffering
    proxy_buffering on;
    proxy_buffer_size 8k;
    proxy_buffers 32 8k;
    proxy_busy_buffers_size 16k;
    
    # Timeouts for high concurrency
    proxy_connect_timeout 5s;
    proxy_send_timeout 60s;
    proxy_read_timeout 60s;
    
    # Connection limits and rate limiting
    limit_conn_zone $binary_remote_addr zone=addr:32m;
    limit_req_zone $binary_remote_addr zone=req:32m rate=100r/s;
    
    # Upstream configuration for matrixon instances
    upstream matrixon_backend {
        least_conn;  # Load balance based on connections
        
        # Multiple matrixon instances for 200k load
        server 127.0.0.1:8001 max_fails=3 fail_timeout=30s weight=1;
        server 127.0.0.1:8002 max_fails=3 fail_timeout=30s weight=1;
        server 127.0.0.1:8003 max_fails=3 fail_timeout=30s weight=1;
        server 127.0.0.1:8004 max_fails=3 fail_timeout=30s weight=1;
        server 127.0.0.1:8005 max_fails=3 fail_timeout=30s weight=1;
        server 127.0.0.1:8006 max_fails=3 fail_timeout=30s weight=1;
        server 127.0.0.1:8007 max_fails=3 fail_timeout=30s weight=1;
        server 127.0.0.1:8008 max_fails=3 fail_timeout=30s weight=1;
        
        # Connection pooling
        keepalive 2000;  # Keep connections alive
        keepalive_requests 10000;
        keepalive_timeout 60s;
    }
    
    # Main server configuration
    server {
        listen 80;
        listen 443 ssl http2;
        server_name matrix.example.com;
        
        # SSL configuration
        ssl_certificate /etc/ssl/certs/matrix.crt;
        ssl_certificate_key /etc/ssl/private/matrix.key;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-CHACHA20-POLY1305;
        ssl_prefer_server_ciphers off;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;
        
        # Connection limits per IP
        limit_conn addr 200;  # Max 200 connections per IP
        limit_req zone=req burst=50 nodelay;
        
        # Matrix server endpoints
        location /_matrix/ {
            # Health check for upstream
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503;
            proxy_next_upstream_tries 3;
            proxy_next_upstream_timeout 10s;
            
            # Proxy settings
            proxy_pass http://matrixon_backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Headers for Matrix compatibility
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Server $host;
            
            # Cache control for media
            location ~* /_matrix/media/ {
                proxy_pass http://matrixon_backend;
                proxy_cache_valid 200 7d;
                expires 7d;
                add_header Cache-Control "public, immutable";
            }
        }
        
        # Well-known endpoints
        location /.well-known/matrix/ {
            proxy_pass http://matrixon_backend;
            proxy_set_header Host $host;
            add_header Access-Control-Allow-Origin *;
        }
        
        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
        
        # Metrics endpoint (restrict access)
        location /metrics {
            allow 127.0.0.1;
            allow 10.0.0.0/8;
            deny all;
            proxy_pass http://matrixon_backend;
        }
    }
    
    # Metrics and monitoring
    server {
        listen 8080;
        server_name _;
        
        location /nginx_status {
            stub_status on;
            access_log off;
            allow 127.0.0.1;
            deny all;
        }
    }
}

# Stream configuration for TCP load balancing (if needed)
stream {
    upstream matrixon_stream {
        least_conn;
        server 127.0.0.1:8001;
        server 127.0.0.1:8002;
        server 127.0.0.1:8003;
        server 127.0.0.1:8004;
        server 127.0.0.1:8005;
        server 127.0.0.1:8006;
        server 127.0.0.1:8007;
        server 127.0.0.1:8008;
    }
    
    server {
        listen 8443;
        proxy_pass matrixon_stream;
        proxy_timeout 1s;
        proxy_responses 1;
        error_log /var/log/nginx/stream.log;
    }
} 
