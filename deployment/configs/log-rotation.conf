# Matrixon Matrix Server - Log Rotation Configuration
# Author: arkSong (arksong2018@gmail.com)
# Date: 2024-12-19
# Version: 1.0
# Purpose: Comprehensive log rotation for all Matrixon services

# Global defaults
compress
delaycompress
missingok
notifempty
create 0644 root root
dateext
dateformat -%Y%m%d-%s

# Matrixon application logs
/var/log/matrixon/*.log {
    daily
    rotate 30
    maxage 90
    size 100M
    compress
    delaycompress
    missingok
    notifempty
    create 0644 matrixon matrixon
    postrotate
        # Signal application to reopen log files
        if [ -f /var/run/matrixon.pid ]; then
            kill -USR1 $(cat /var/run/matrixon.pid)
        fi
        # Send log rotation event to monitoring
        logger -t "logrotate" "Matrixon application logs rotated"
    endscript
}

# Matrixon security logs (longer retention)
/var/log/matrixon/security.log {
    daily
    rotate 365
    maxage 365
    size 50M
    compress
    delaycompress
    missingok
    notifempty
    create 0644 root root
    postrotate
        logger -t "logrotate" "Matrixon security logs rotated"
        # Archive to long-term storage
        if [ -n "${BACKUP_S3_BUCKET:-}" ]; then
            aws s3 cp "$1" "s3://${BACKUP_S3_BUCKET}/logs/security/" || true
        fi
    endscript
}

# Matrixon audit logs (longest retention)
/var/log/matrixon/audit.log {
    daily
    rotate 2555  # 7 years
    maxage 2555
    size 100M
    compress
    delaycompress
    missingok
    notifempty
    create 0644 root root
    postrotate
        logger -t "logrotate" "Matrixon audit logs rotated"
        # Compliance archival
        if [ -n "${BACKUP_S3_BUCKET:-}" ]; then
            aws s3 cp "$1" "s3://${BACKUP_S3_BUCKET}/logs/audit/" || true
        fi
    endscript
}

# NGINX logs
/var/log/nginx/*.log {
    daily
    rotate 52
    maxage 365
    size 500M
    compress
    delaycompress
    missingok
    notifempty
    create 0644 www-data www-data
    sharedscripts
    prerotate
        if [ -d /etc/logrotate.d/httpd-prerotate ]; then \
            run-parts /etc/logrotate.d/httpd-prerotate; \
        fi
    endscript
    postrotate
        # Reload NGINX to reopen log files
        if [ -f /var/run/nginx.pid ]; then
            kill -USR1 $(cat /var/run/nginx.pid)
        fi
        logger -t "logrotate" "NGINX logs rotated"
    endscript
}

# PostgreSQL logs
/var/log/postgresql/*.log {
    daily
    rotate 60
    maxage 180
    size 200M
    compress
    delaycompress
    missingok
    notifempty
    create 0644 postgres postgres
    postrotate
        # PostgreSQL automatically handles log rotation via logging_collector
        # Just log the rotation event
        logger -t "logrotate" "PostgreSQL logs rotated"
    endscript
}

# Redis logs (if file logging is enabled)
/var/log/redis/*.log {
    daily
    rotate 30
    maxage 90
    size 100M
    compress
    delaycompress
    missingok
    notifempty
    create 0644 redis redis
    postrotate
        # Redis doesn't need SIGHUP for log rotation
        logger -t "logrotate" "Redis logs rotated"
    endscript
}

# System logs related to Matrixon
/var/log/matrixon-*.log {
    daily
    rotate 90
    maxage 180
    size 50M
    compress
    delaycompress
    missingok
    notifempty
    create 0644 root root
    postrotate
        logger -t "logrotate" "Matrixon system logs rotated"
    endscript
}

# Fail2Ban logs
/var/log/fail2ban.log {
    weekly
    rotate 12
    maxage 365
    size 10M
    compress
    delaycompress
    missingok
    notifempty
    create 0644 root root
    postrotate
        # Restart fail2ban to reopen log file
        systemctl reload fail2ban || true
        logger -t "logrotate" "Fail2Ban logs rotated"
    endscript
}

# UFW firewall logs
/var/log/ufw.log {
    weekly
    rotate 12
    maxage 365
    size 50M
    compress
    delaycompress
    missingok
    notifempty
    create 0644 root root
    postrotate
        logger -t "logrotate" "UFW logs rotated"
    endscript
}

# Docker container logs (if using file logging driver)
/var/lib/docker/containers/*/*-json.log {
    daily
    rotate 10
    maxage 30
    size 100M
    compress
    delaycompress
    missingok
    notifempty
    copytruncate
    postrotate
        logger -t "logrotate" "Docker container logs rotated"
    endscript
}

# Elasticsearch logs
/var/log/elasticsearch/*.log {
    daily
    rotate 30
    maxage 90
    size 200M
    compress
    delaycompress
    missingok
    notifempty
    create 0644 elasticsearch elasticsearch
    postrotate
        logger -t "logrotate" "Elasticsearch logs rotated"
    endscript
}

# Logstash logs
/var/log/logstash/*.log {
    daily
    rotate 30
    maxage 90
    size 100M
    compress
    delaycompress
    missingok
    notifempty
    create 0644 logstash logstash
    postrotate
        logger -t "logrotate" "Logstash logs rotated"
    endscript
}

# Kibana logs
/var/log/kibana/*.log {
    daily
    rotate 30
    maxage 90
    size 50M
    compress
    delaycompress
    missingok
    notifempty
    create 0644 kibana kibana
    postrotate
        logger -t "logrotate" "Kibana logs rotated"
    endscript
}

# Prometheus logs
/var/log/prometheus/*.log {
    daily
    rotate 30
    maxage 90
    size 100M
    compress
    delaycompress
    missingok
    notifempty
    create 0644 prometheus prometheus
    postrotate
        logger -t "logrotate" "Prometheus logs rotated"
    endscript
}

# Grafana logs
/var/log/grafana/*.log {
    daily
    rotate 30
    maxage 90
    size 50M
    compress
    delaycompress
    missingok
    notifempty
    create 0644 grafana grafana
    postrotate
        logger -t "logrotate" "Grafana logs rotated"
    endscript
}

# AlertManager logs
/var/log/alertmanager/*.log {
    daily
    rotate 30
    maxage 90
    size 50M
    compress
    delaycompress
    missingok
    notifempty
    create 0644 alertmanager alertmanager
    postrotate
        logger -t "logrotate" "AlertManager logs rotated"
    endscript
}

# Backup system logs
/var/log/matrixon-backup.log {
    weekly
    rotate 52
    maxage 365
    size 10M
    compress
    delaycompress
    missingok
    notifempty
    create 0644 root root
    postrotate
        logger -t "logrotate" "Backup system logs rotated"
    endscript
}

# SSL/TLS logs
/var/log/matrixon-ssl.log {
    weekly
    rotate 52
    maxage 365
    size 10M
    compress
    delaycompress
    missingok
    notifempty
    create 0644 root root
    postrotate
        logger -t "logrotate" "SSL/TLS logs rotated"
    endscript
}

# Firewall logs
/var/log/matrixon-firewall.log {
    weekly
    rotate 52
    maxage 365
    size 10M
    compress
    delaycompress
    missingok
    notifempty
    create 0644 root root
    postrotate
        logger -t "logrotate" "Firewall logs rotated"
    endscript
}

# Monitoring logs
/var/log/matrixon-monitoring.log {
    daily
    rotate 30
    maxage 90
    size 50M
    compress
    delaycompress
    missingok
    notifempty
    create 0644 root root
    postrotate
        logger -t "logrotate" "Monitoring logs rotated"
    endscript
}

# Application access logs (high volume)
/var/log/matrixon/access.log {
    hourly
    rotate 168  # 7 days * 24 hours
    maxage 7
    size 1G
    compress
    delaycompress
    missingok
    notifempty
    create 0644 matrixon matrixon
    postrotate
        # High-frequency rotation notification
        logger -t "logrotate" "Matrixon access logs rotated (hourly)"
    endscript
}

# Error logs (medium retention)
/var/log/matrixon/error.log {
    daily
    rotate 60
    maxage 180
    size 100M
    compress
    delaycompress
    missingok
    notifempty
    create 0644 matrixon matrixon
    postrotate
        logger -t "logrotate" "Matrixon error logs rotated"
        # Send alert if error log is large (indicates issues)
        if [ -s "$1" ] && [ $(stat -f%z "$1" 2>/dev/null || stat -c%s "$1") -gt 52428800 ]; then  # 50MB
            logger -p user.warning -t "logrotate" "Large error log detected: $1"
            # Check for high error rates
            if [ $(grep -c "ERROR" "$1") -gt 1000 ]; then
                logger -p user.error -t "logrotate" "High error rate detected in $1"
            fi
            # Check for critical errors
            if [ $(grep -c "CRITICAL" "$1") -gt 0 ]; then
                logger -p user.crit -t "logrotate" "Critical errors found in $1"
            fi
        fi
    endscript
    prerotate
        # Check if log file exists and is writable
        if [ ! -w "$1" ]; then
            logger -p user.error -t "logrotate" "Cannot write to log file: $1"
            exit 1
        fi
    endscript
} 
