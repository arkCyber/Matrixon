# =============================================================================
# Mock Matrixon Server Configuration
# =============================================================================
#
# Project: Matrixon - Ultra High Performance Matrix NextServer
# Author: arkSong (arksong2018@gmail.com) - Founder of Matrixon Innovation Project
# Date: 2024-12-11
# Version: 0.11.0-alpha
# License: Apache 2.0 / MIT
#
# Description:
#   Mock server configuration for testing nginx reverse proxy
#   Simulates Matrix API responses
#
# =============================================================================

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/json;

    # Client API server (port 8008)
    server {
        listen 8008;
        server_name localhost;

        # Health check
        location /health {
            return 200 '{"status": "healthy", "service": "matrixon-mock-client"}';
            add_header Content-Type application/json;
        }

        # Matrix client versions
        location /_matrix/client/versions {
            return 200 '{
                "versions": ["r0.6.1", "v1.1", "v1.2", "v1.3"],
                "unstable_features": {
                    "org.matrix.label_based_filtering": true,
                    "org.matrix.e2e_cross_signing": true
                }
            }';
            add_header Content-Type application/json;
            add_header Access-Control-Allow-Origin *;
        }

        # Matrix capabilities
        location /_matrix/client/v3/capabilities {
            return 200 '{
                "capabilities": {
                    "m.change_password": {"enabled": true},
                    "m.room_versions": {
                        "default": "9",
                        "available": {"1": "stable", "2": "stable", "9": "stable"}
                    }
                }
            }';
            add_header Content-Type application/json;
            add_header Access-Control-Allow-Origin *;
        }

        # Well-known client
        location /.well-known/matrix/client {
            return 200 '{
                "m.homeserver": {"base_url": "http://localhost"},
                "m.identity_server": {"base_url": "http://localhost"}
            }';
            add_header Content-Type application/json;
            add_header Access-Control-Allow-Origin *;
        }

        # Well-known server
        location /.well-known/matrix/server {
            return 200 '{
                "m.server": "localhost:8448"
            }';
            add_header Content-Type application/json;
            add_header Access-Control-Allow-Origin *;
        }

        # Registration availability
        location /_matrix/client/v3/register/available {
            return 200 '{"available": true}';
            add_header Content-Type application/json;
            add_header Access-Control-Allow-Origin *;
        }

        # User registration
        location /_matrix/client/v3/register {
            if ($request_method = OPTIONS) {
                add_header Access-Control-Allow-Origin *;
                add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
                add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization";
                return 204;
            }
            return 200 '{
                "user_id": "@test:localhost",
                "access_token": "mock_access_token_12345",
                "device_id": "TEST_DEVICE"
            }';
            add_header Content-Type application/json;
            add_header Access-Control-Allow-Origin *;
        }

        # Login
        location /_matrix/client/v3/login {
            if ($request_method = GET) {
                return 200 '{
                    "flows": [{"type": "m.login.password"}]
                }';
            }
            return 200 '{
                "user_id": "@test:localhost",
                "access_token": "mock_access_token_12345",
                "device_id": "TEST_DEVICE"
            }';
            add_header Content-Type application/json;
            add_header Access-Control-Allow-Origin *;
        }

        # Whoami
        location /_matrix/client/v3/account/whoami {
            return 200 '{
                "user_id": "@test:localhost"
            }';
            add_header Content-Type application/json;
            add_header Access-Control-Allow-Origin *;
        }

        # Create room
        location /_matrix/client/v3/createRoom {
            return 200 '{
                "room_id": "!test_room:localhost",
                "room_alias": "#test-room:localhost"
            }';
            add_header Content-Type application/json;
            add_header Access-Control-Allow-Origin *;
        }

        # Room state
        location ~ ^/_matrix/client/v3/rooms/([^/]+)/state$ {
            return 200 '[]';
            add_header Content-Type application/json;
            add_header Access-Control-Allow-Origin *;
        }

        # Send message
        location ~ ^/_matrix/client/v3/rooms/([^/]+)/send/([^/]+)/(.+)$ {
            return 200 '{
                "event_id": "$mock_event_id_12345"
            }';
            add_header Content-Type application/json;
            add_header Access-Control-Allow-Origin *;
        }

        # Default Matrix API response
        location /_matrix/ {
            return 200 '{"error": "Mock API endpoint", "errcode": "M_UNRECOGNIZED"}';
            add_header Content-Type application/json;
            add_header Access-Control-Allow-Origin *;
        }
    }

    # Federation API server (port 8448)
    server {
        listen 8448;
        server_name localhost;

        # Health check
        location /health {
            return 200 '{"status": "healthy", "service": "matrixon-mock-federation"}';
            add_header Content-Type application/json;
        }

        # Federation version
        location /_matrix/federation/v1/version {
            return 200 '{
                "server": {
                    "name": "Matrixon Mock",
                    "version": "0.11.0-alpha"
                }
            }';
            add_header Content-Type application/json;
        }

        # Federation query
        location /_matrix/federation/v1/query/profile {
            return 404 '{"errcode": "M_NOT_FOUND", "error": "User not found"}';
            add_header Content-Type application/json;
        }

        # Default federation response
        location /_matrix/federation/ {
            return 200 '{"error": "Mock federation endpoint"}';
            add_header Content-Type application/json;
        }
    }

    # Metrics server (port 9090)
    server {
        listen 9090;
        server_name localhost;

        # Health check
        location /health {
            return 200 '{"status": "healthy", "service": "matrixon-mock-metrics"}';
            add_header Content-Type application/json;
        }

        # Metrics endpoint
        location /metrics {
            return 200 '# HELP matrixon_mock_info Mock metrics
# TYPE matrixon_mock_info gauge
matrixon_mock_info{version="0.11.0-alpha"} 1
';
            add_header Content-Type text/plain;
        }

        # Default metrics response
        location / {
            return 200 '{"service": "mock-metrics"}';
            add_header Content-Type application/json;
        }
    }
} 
